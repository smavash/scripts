#!/bin/sh
# $Header: adstpall_ux.sh 120.10 2007/03/26 12:26:52 mmanku ship $
# *===========================================================================+
# |  Copyright (c) 1996 Oracle Corporation, Redwood Shores, California, USA   |
# |                        All rights reserved                                |
# |                       Applications  Division                              |
# +===========================================================================+
# |
# | FILENAME
# |   adstpall.sh
# |
# | DESCRIPTION
# |  This script is used to stop Oracle E-Business Suite Services on  machine uodev01  
# |
# | USAGE
# |   adstpall.sh
# |
# | PLATFORM
# |   Unix Generic
# |
# | NOTES
# |
# | HISTORY
# |
# +===========================================================================+
#
# ###############################################################
# 
# This file is automatically generated by AutoConfig.  It will be read and
# overwritten.  If you were instructed to edit this file, or if you are not
# able to use the settings created by AutoConfig, refer to Metalink Note
# 387859.1 for assistance.
# 
# ###############################################################

#
# dbdrv: none 

header_string="$Header: adstpall_ux.sh 120.10 2007/03/26 12:26:52 mmanku ship $"
prog_version=`echo "$header_string" | awk '{print $3}'`
program=`basename $0`
usage_msg="\t$program <appsusername/appspassword>"

printf "\nYou are running $program version $prog_version\n\n"

unpw=""
ERROR_MSG=""

chk_password() {
sqlplus -s /nolog > /dev/null 2>&1 <<EOF
whenever sqlerror exit failure
connect $unpw
exit success
EOF

if [ $? -ne 0 ]; then 
  ERROR_MSG="Database connection could not be established. Either the database is down or the APPS credentials supplied are wrong."
  usage
fi
}

usage(){
   printf "\n$program: $ERROR_MSG \n\n"
   printf "USAGE: $usage_msg\n\n" 
   printf "\n$program: exiting with status 1\n\n"
   printf "\n`date +%D-%T` :: $program: $ERROR_MSG\n" >> $LOGFILE
   printf "USAGE: $usage_msg\n\n" >> $LOGFILE
   printf "\n`date +%D-%T` :: $program: exiting with status 1\n" >> $LOGFILE
   printf "\n=======================================================================\n \n" >> $LOGFILE
   exit 1;
}

ENVFILE=".env"
STOP="3";
if [ ! -d ".../logs/appl/admin/log" ]; then
  mkdir -p .../logs/appl/admin/log
fi;
LOGFILE=.../logs/appl/admin/log/adstpall.log;
touch $LOGFILE
exit_code=$?

#
# if logfile creation fails, fail out
#
if [ $exit_code -ne 0 ]; then
    printf "Unable to create logfile - permission denied\n";
    printf "Attempted to write to:\n\t";
    printf "$LOGFILE\n\n";
    printf "\n$program: exiting with status 1\n\n"
   exit 1;
fi

#
# setup the environment for Oracle and Applications
#
#    $APPL_TOP/APPS<S_CONTEXTNAME>.env
#
if [ ! -f $ENVFILE ];
then
   printf "Environment file $ENVFILE is not found.\n"
   printf "Environment file $ENVFILE is not found.\n" >> $LOGFILE
   exit 1;
else
   . $ENVFILE
fi

#
# Validate Apps credentials
# 

if [ -z "$1" ]; then
    printf "\nEnter the APPS username: "
    read USERNAME
    stty -echo
    printf "\nEnter the APPS password: "
    read PASSWORD
    printf "\n"
    stty echo
    USERNAME=`echo $USERNAME | sed -e 's/^ *//' -e 's/ *$//'`
    PASSWORD=`echo $PASSWORD | sed -e 's/^ *//' -e 's/ *$//'`

    if test "x$USERNAME" = "x"  -o "x$PASSWORD" = "x" ; then
      ERROR_MSG="too few arguments specified."
      usage
    fi
    unpw="$USERNAME/$PASSWORD"
    chk_password
else

    unpw="$1"

    USERNAME=`echo $unpw|cut -s -d / -f1`
    PASSWORD=`echo $unpw|cut -s -d / -f2`

    if test "x$USERNAME" = "x"  -o "x$PASSWORD" = "x" ; then
      ERROR_MSG="too few arguments specified."
      usage
    else
      USERNAME=`echo $USERNAME | sed -e 's/^ *//' -e 's/ *$//'`
      PASSWORD=`echo $PASSWORD | sed -e 's/^ *//' -e 's/ *$//'`
      unpw="$USERNAME/$PASSWORD"
      chk_password
   fi
fi


#
# Call the ServiceControl API 
#
        logger -t ERP -p local2.notice -i "##### SHUTDOWN OF HZON EBS APPS SERVICES FAILED. ######## "
        exit 1;
  #########################################################################################
fi
#
# Exit status
#

printf "\n$program:Exiting with status $exit_code\n";
printf "\n$program: check the logfile $LOGFILE for more information ...  \n\n"


